from unittest.mock import patch, MagicMock
from datetime import datetime

from sarinfer.metadata.metadata_manager import ModelMetadataManager
from src.sarinfer.metadata.model_metadata import ModelMetadata
from pymongo.errors import DuplicateKeyError
import uuid


# Test adding a new model with autogenerated model_id and version
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_add_model_autogenerated(mock_mongo_db_config, mock_mongo_client):
    """Test the add_model method in ModelMetadataManager with autogenerated model_id and version."""

    # Create a mock MongoDB collection
    mock_collection = MagicMock()
    mock_mongo_db_config.return_value.get_collection.return_value = mock_collection

    # Mock the insert_one behavior in MongoDB
    mock_collection.insert_one.return_value.inserted_id = str(uuid.uuid4())

    # Initialize ModelMetadataManager with the mocked MongoDBConfig
    manager = ModelMetadataManager()

    # Create a test ModelMetadata object (without providing model_id or version)
    test_metadata = ModelMetadata(
        model_name="Test Model",
        size=512,
        location="/path/to/test_model"
    )

    # Call the add_model method
    result = manager.add_model(test_metadata)

    # Assert that a model_id is returned and autogenerated
    assert result is not None
    assert isinstance(result, str)

    # Ensure insert_one was called on the collection with the correct data
    mock_collection.insert_one.assert_called_once_with(test_metadata.to_dict())


# Test DuplicateKeyError handling in add_model method with autogenerated model_id
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_add_model_duplicate(mock_mongo_db_config, mock_mongo_client):
    """Test add_model when a model already exists (DuplicateKeyError)."""

    # Create a mock MongoDB collection
    mock_collection = MagicMock()
    mock_mongo_db_config.return_value.get_collection.return_value = mock_collection

    # Mock the insert_one method to raise DuplicateKeyError
    mock_collection.insert_one.side_effect = DuplicateKeyError("Duplicate Key Error")

    # Initialize ModelMetadataManager
    manager = ModelMetadataManager()

    # Create a test ModelMetadata object (without providing model_id or version)
    test_metadata = ModelMetadata(
        model_name="Test Model",
        size=512,
        location="/path/to/test_model"
    )

    # Call add_model and ensure it returns None due to the duplicate key
    result = manager.add_model(test_metadata)
    assert result is None


# Test get_model_metadata method
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_get_model_metadata(mock_mongo_db_config, mock_mongo_client):
    """Test the get_model_metadata method in ModelMetadataManager."""

    # Create a mock MongoDB collection
    mock_collection = MagicMock()
    mock_mongo_db_config.return_value.get_collection.return_value = mock_collection

    # Mock the find_one behavior
    mock_collection.find_one.return_value = {
        "model_id": str(uuid.uuid4()),
        "model_name": "Test Model",
        "version": "v1.0",
        "size": 512,
        "location": "/path/to/test_model",
        "load_status": "unloaded",
        "last_loaded": None,
        "created_at": datetime.utcnow(),
        "updated_at": datetime.utcnow()
    }

    # Initialize ModelMetadataManager
    manager = ModelMetadataManager()

    # Call the get_model_metadata method
    result = manager.get_model_metadata("test_model")

    # Assert that the correct ModelMetadata is returned
    assert result.model_name == "Test Model"

    # Ensure find_one was called on the collection
    mock_collection.find_one.assert_called_once_with({"model_id": "test_model"})


# Test update_model_metadata method
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_update_model_metadata(mock_mongo_db_config, mock_mongo_client):
    """Test the update_model_metadata method in ModelMetadataManager."""

    # Create a mock MongoDB collection
    mock_collection = MagicMock()
    mock_mongo_db_config.return_value.get_collection.return_value = mock_collection

    # Mock the update_one method in MongoDB
    mock_collection.update_one.return_value.modified_count = 1

    # Initialize ModelMetadataManager
    manager = ModelMetadataManager()

    # Prepare an update dictionary
    updates = {"version": "v2.0"}

    # Call the update_model_metadata method
    result = manager.update_model_metadata("test_model", updates)

    # Assert that the modified_count is 1
    assert result == 1

    # Ensure update_one was called with the correct data
    mock_collection.update_one.assert_called_once()


# Test delete_model_metadata method
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_delete_model_metadata(mock_mongo_db_config, mock_mongo_client):
    """Test the delete_model_metadata method in ModelMetadataManager."""

    # Create a mock MongoDB collection
    mock_mongo_db_config.return_value.get_collection.return_value = MagicMock()

    # Mock the delete_one method
    mock_mongo_db_config.return_value.get_collection.return_value.delete_one.return_value.deleted_count = 1

    # Initialize ModelMetadataManager
    manager = ModelMetadataManager()

    # Call the delete_model_metadata method
    result = manager.delete_model_metadata("test_model")

    # Assert that the deleted_count is 1
    assert result == 1


# Test list_all_models method
@patch('sarinfer.config.mongo_config.MongoClient', new_callable=MagicMock)
@patch('sarinfer.metadata.metadata_manager.MongoDBConfig')
def test_list_all_models(mock_mongo_db_config, mock_mongo_client):
    """Test the list_all_models method in ModelMetadataManager."""

    # Create a mock MongoDB collection
    mock_collection = MagicMock()
    mock_mongo_db_config.return_value.get_collection.return_value = mock_collection

    # Mock the find method to return a list of models with the correct structure
    mock_collection.find.return_value = [
        {
            "model_id": str(uuid.uuid4()),
            "model_name": "Test Model 1",
            "version": "v1.0",
            "size": 512,
            "location": "/path/to/test_model_1",
            "load_status": "unloaded",
            "last_loaded": None,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        },
        {
            "model_id": str(uuid.uuid4()),
            "model_name": "Test Model 2",
            "version": "v2.0",
            "size": 1024,
            "location": "/path/to/test_model_2",
            "load_status": "unloaded",
            "last_loaded": None,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
    ]

    # Initialize ModelMetadataManager
    manager = ModelMetadataManager()

    # Call the list_all_models method
    result = manager.list_all_models()

    # Assert that the correct models are returned
    assert len(result) == 2
    assert result[0].model_name == "Test Model 1"
    assert result[1].model_name == "Test Model 2"

    # Ensure find was called on the collection
    mock_collection.find.assert_called_once()
